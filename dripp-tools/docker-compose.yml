version: "3.7"

services:
  mongo:
    image: mongo:latest
    container_name: mongo_container
    environment:
      MONGO_INITDB_ROOT_USERNAME: phoenix
      MONGO_INITDB_ROOT_PASSWORD: phoenix
    ports:
      - 27017:27017
    volumes:
      - ./database/mongo:/data/db
    networks:
      - dripp_network
    restart: always

  redis:
    image: redis:latest
    container_name: redis_container
    ports:
      - "6379:6379"
    volumes:
      - ./database/redis/data:/data
    networks:
      - dripp_network

  rabbitmq:
    image: rabbitmq
    container_name: rabbitmq_container
    ports:
      - 5672:5672

  postgres:
    image: postgres:latest
    container_name: postgres_container
    restart: always
    environment:
      POSTGRES_USER: sentry
      POSTGRES_PASSWORD: 89PsZXyRStOT2
      POSTGRES_DB: sentry
    networks:
      - dripp_network
    volumes:
      - "./database/postgres:/var/lib/postgresql/data"

  sentry-base:
    image: sentry:latest
    container_name: sentry_base_container
    restart: always
    ports:
      - "9000:9000"
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    networks:
      - dripp_network
    volumes:
      - "./database/sentry:/var/lib/sentry/files"

  sentry-cron:
    image: sentry:latest
    container_name: sentry_cron_container
    restart: always
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    command: "sentry run cron"
    networks:
      - dripp_network
    volumes:
      - "./database/sentry/:/var/lib/sentry/files"

  sentry-worker:
    image: sentry:latest
    container_name: sentry_worker_container
    restart: always
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    command: "sentry run worker"
    networks:
      - dripp_network
    volumes:
      - "./database/sentry/:/var/lib/sentry/files"

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    container_name: setup
    command:
      - bash
      - -c
      - |
        echo "Waiting for Elasticsearch availability";
        until curl -s http://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" http://elasticsearch:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
    networks:
      - dripp_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    container_name: elasticsearch_container
    environment:
      - discovery.type=single-node
      - cluster.name=elasticsearch
      - bootstrap.memory_lock=true
      # limits elasticsearch to 1 GB of RAM
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.security.http.ssl.enabled=false
    networks:
      - dripp_network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.1
    container_name: kibana_container
    ports:
      - 5601:5601
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - TELEMETRY_ENABLED=false
    networks:
      - dripp_network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.1
    container_name: logstash_container
    command:
      - /bin/bash
      - -c
      - echo "Waiting for Elasticsearch availability";
        until curl -s http://elasticsearch:9200 | grep -q "missing authentication credentials"; do sleep 1; done;
        echo "Starting logstash";
        /usr/share/logstash/bin/logstash -f /usr/share/logstash/pipeline/logstash.conf
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USERNAME=${ELASTIC_USERNAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=http://elasticsearch:9200
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
    ports:
      - 5044:5044
      - 9600:9600
    networks:
      - dripp_network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger_container
    ports:
      - '5775:5775/udp'
      - '6831:6831/udp'
      - '6832:6832/udp'
      - '5778:5778'
      - '16686:16686'
      - '14250:14250'
      - '14268:14268'
      - '14269:14269'
      - '9411:9411'
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
    networks:
      - dripp_network

networks:
  dripp_network:
    external: true
